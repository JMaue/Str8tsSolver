using Str8tsSolverLib;

namespace Str8tsSolverTest
{
  public class BoardTests
  {
    [SetUp]
    public void Setup()
    {
    }

    [Test]
    public void Test01()
    {
      Assert.IsTrue(Solve(new char[,]
      { // devilish, 
        { '#', ' ', ' ', 'I', ' ', ' ', '#', ' ', ' ' },
        { '#', ' ', ' ', ' ', '2', ' ', '7', ' ', ' ' },
        { ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ' },
        { ' ', ' ', ' ', ' ', ' ', ' ', '3', ' ', '#' },
        { 'G', '#', '6', '3', ' ', ' ', ' ', '#', '#' },
        { '#', ' ', '8', ' ', ' ', ' ', ' ', ' ', ' ' },
        { ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ' },
        { ' ', ' ', '4', ' ', ' ', ' ', ' ', '7', 'A' },
        { ' ', '2', '#', ' ', ' ', '#', ' ', ' ', 'F' },
      }));
    }

    [Test]
    public void Test02()
    {
      Assert.IsTrue(Solve(new char[,]
      { // easy
        { 'E', '#', '8', ' ', ' ', '#', '#', '3', ' ' },
        { ' ', '7', '9', '#', 'B', ' ', ' ', '4', ' ' },
        { ' ', ' ', '#', '3', ' ', ' ', '2', ' ', '6' },
        { '#', ' ', ' ', ' ', '8', ' ', 'D', ' ', ' ' },
        { '#', 'F', '4', ' ', '#', ' ', ' ', 'A', '#' },
        { ' ', '1', 'C', '4', ' ', ' ', ' ', ' ', '#' },
        { ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ' },
        { '4', ' ', '1', ' ', '#', '#', '6', ' ', ' ' },
        { ' ', ' ', '#', '#', ' ', ' ', ' ', 'I', 'G' },
      }));
    }


    [Test]
    public void Test03()
    {
      Assert.IsTrue(Solve(new char[,]
      { // devilish
        { 'F', ' ', ' ', '#', '2', ' ', ' ', '#', '#' },
        { ' ', ' ', '7', ' ', '#', '#', ' ', ' ', '#' },
        { ' ', ' ', '#', ' ', ' ', '#', '#', ' ', ' ' },
        { '9', ' ', '#', ' ', ' ', ' ', ' ', '6', ' ' },
        { '#', ' ', ' ', 'H', ' ', ' ', ' ', ' ', '#' },
        { ' ', ' ', ' ', ' ', 'I', '#', ' ', ' ', ' ' },
        { ' ', ' ', '#', ' ', ' ', ' ', 'A', ' ', ' ' },
        { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
        { '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', 'C' },
      }));
    }

    [Test]
    public void Test04()
    {
      Assert.IsTrue(Solve(new char[,]
      { // hard
        { 'E', 'I', ' ', ' ', '#', '#', ' ', ' ', ' ' },
        { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '6' },
        { ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', '#' },
        { '#', ' ', ' ', 'D', ' ', ' ', '#', 'H', ' ' },
        { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
        { ' ', '#', 'F', ' ', ' ', 'B', ' ', ' ', 'C' },
        { '#', ' ', ' ', '5', ' ', '#', '#', '1', ' ' },
        { ' ', ' ', '7', ' ', ' ', ' ', ' ', ' ', ' ' },
        { ' ', ' ', ' ', 'A', '#', '3', '4', '#', '#' },
      }));
    }

    [Test]
    public void Test05()
    {
      Assert.IsTrue(Solve(new char[,]
      { // medium
        { '5', '6', '#', '#', ' ', ' ', ' ', '#', '#' },
        { '4', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#' },
        { 'B', ' ', ' ', ' ', '#', ' ', '7', '9', ' ' },
        { '#', ' ', ' ', ' ', '1', ' ', 'F', '#', ' ' },
        { ' ', ' ', 'I', ' ', '2', ' ', '#', ' ', ' ' },
        { ' ', '#', 'H', '2', ' ', ' ', ' ', ' ', '#' },
        { ' ', ' ', ' ', '8', '#', ' ', ' ', ' ', 'D' },
        { '#', ' ', ' ', ' ', '5', '4', '#', ' ', '3' },
        { '#', '#', ' ', '6', ' ', 'A', '#', ' ', ' ' },
      }));
    }

    [Test]
    public void Test06()
    {
      Assert.IsTrue(Solve(new char[,]
      { // devilish
        { ' ', ' ', '#', 'I', ' ', ' ', '#', ' ', '3' },
        { ' ', ' ', ' ', ' ', ' ', '#', '1', ' ', ' ' },
        { '#', ' ', ' ', ' ', '#', '3', ' ', ' ', 'D' },
        { '#', '5', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
        { ' ', ' ', 'A', '#', ' ', ' ', '#', ' ', ' ' },
        { ' ', ' ', ' ', ' ', '5', ' ', ' ', ' ', '#' },
        { '#', '#', '3', ' ', '#', ' ', ' ', ' ', 'G' },
        { ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ' },
        { ' ', ' ', ' ', '1', ' ', 'H', '#', ' ', ' ' },
      }));
    }

    [Test]
    public void Test07()
    {
      Assert.IsTrue(Solve(new char[,]
      { // medium
        { 'E', ' ', ' ', ' ', ' ', '#', '#', ' ', '7' },
        { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
        { ' ', ' ', '#', ' ', ' ', '2', ' ', 'G', '#' },
        { 'D', '#', ' ', ' ', 'H', '#', ' ', ' ', ' ' },
        { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '4', ' ' },
        { ' ', ' ', ' ', '#', '#', ' ', ' ', '#', '#' },
        { '#', 'I', ' ', ' ', ' ', ' ', '#', ' ', '4' },
        { ' ', ' ', ' ', ' ', ' ', '5', ' ', ' ', ' ' },
        { '9', ' ', '#', '#', ' ', ' ', ' ', ' ', 'A' },
      }));
    }

    [Test]
    public void Test08()
    {
      Assert.IsTrue(Solve(new char[,]
      { // medium
        { '#', ' ', '4', 'C', ' ', ' ', '#', ' ', ' ' },
        { ' ', '3', ' ', '#', '6', ' ', '#', '9', ' ' },
        { ' ', ' ', 'F', ' ', ' ', '#', 'G', ' ', '#' },
        { 'A', '6', ' ', ' ', ' ', ' ', ' ', '5', ' ' },
        { ' ', ' ', ' ', ' ', 'E', ' ', ' ', ' ', ' ' },
        { '7', ' ', ' ', ' ', ' ', ' ', ' ', '6', '#' },
        { 'I', ' ', '#', '#', '1', ' ', '#', ' ', ' ' },
        { ' ', ' ', '#', ' ', ' ', 'H', ' ', ' ', ' ' },
        { '5', ' ', '#', ' ', ' ', '#', ' ', ' ', '#' },
      }));
    }

    [Test]
    public void Test09()
    {
      Assert.IsTrue(Solve(new char[,]
      { // devilish 
        { '#', '#', '9', ' ', '#', ' ', ' ', ' ', 'B' },
        { ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#' },
        { ' ', ' ', '#', ' ', ' ', 'C', '#', ' ', ' ' },
        { '#', ' ', ' ', '#', ' ', ' ', ' ', '4', ' ' },
        { '#', ' ', '7', ' ', ' ', ' ', ' ', ' ', '#' },
        { ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#' },
        { '4', ' ', '#', '#', ' ', ' ', 'I', ' ', ' ' },
        { '#', '2', ' ', '4', 'A', '8', ' ', ' ', ' ' },
        { 'F', ' ', ' ', ' ', '#', ' ', ' ', '#', '#' },
      }));
    }

    [Test]
    public void Test10()
    {
      Assert.IsTrue(Solve(new char[,]
      { // medium
        { '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', 'G' },
        { ' ', ' ', ' ', ' ', '#', ' ', '3', ' ', '#' },
        { '9', ' ', '#', ' ', ' ', 'E', '4', '2', ' ' },
        { '#', ' ', '7', 'C', ' ', ' ', 'I', ' ', ' ' },
        { '1', ' ', ' ', '8', ' ', ' ', ' ', ' ', ' ' },
        { ' ', ' ', '#', ' ', ' ', '#', '6', ' ', '#' },
        { ' ', '4', ' ', '#', ' ', '8', '#', ' ', ' ' },
        { '#', '5', ' ', ' ', 'A', '7', ' ', ' ', ' ' },
        { 'F', ' ', ' ', '5', ' ', '#', ' ', ' ', '#' },
      }));
    }

    [Test]
    public void Test11()
    {
      Assert.IsTrue(Solve(new char[,]
      { // devilish
        { '1', ' ', '#', '5', ' ', ' ', ' ', '#', '#' },
        { ' ', '3', ' ', ' ', ' ', '9', ' ', ' ', '#' },
        { '#', ' ', ' ', '#', '7', ' ', ' ', ' ', ' ' },
        { '#', '#', ' ', ' ', ' ', 'A', '#', ' ', ' ' },
        { ' ', ' ', ' ', ' ', ' ', '2', ' ', ' ', '7' },
        { ' ', '6', '#', 'D', ' ', ' ', ' ', 'E', '#' },
        { ' ', ' ', '9', ' ', ' ', '#', ' ', ' ', 'C' },
        { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
        { '#', '#', '8', ' ', ' ', ' ', 'I', ' ', ' ' },
      }));
    }

    [Test]
    public void Test12()
    {
      Assert.IsTrue(Solve(new char[,]
      { // easy
        { '#', '#', '6', ' ', '#', ' ', ' ', '#', 'H' },
        { ' ', ' ', '5', ' ', '#', '3', ' ', '1', '2' },
        { ' ', ' ', '#', '4', '5', '#', '#', ' ', ' ' },
        { ' ', '8', 'A', ' ', '4', ' ', ' ', ' ', '#' },
        { '#', '#', '9', ' ', '#', ' ', ' ', 'G', '#' },
        { '#', ' ', ' ', ' ', ' ', '7', 'B', ' ', '3' },
        { '2', ' ', '#', '#', ' ', ' ', '#', ' ', ' ' },
        { '3', ' ', '2', ' ', 'I', ' ', ' ', ' ', ' ' },
        { 'F', '#', ' ', ' ', '#', ' ', ' ', '#', '#' },
      }));
    }

    [Test]
    public void Test13()
    {
      Assert.IsTrue(Solve(new char[,]
      { // devilish
        { ' ', ' ', '#', '#', ' ', '1', ' ', '#', 'H' },
        { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
        { '#', 'F', ' ', ' ', '#', '#', ' ', ' ', ' ' },
        { ' ', '#', '#', ' ', '8', ' ', 'B', '#', '5' },
        { ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ' },
        { 'A', ' ', ' ', '#', '#', ' ', ' ', ' ', '#' },
        { ' ', ' ', '#', ' ', ' ', ' ', ' ', 'I', '#' },
        { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
        { '#', ' ', ' ', 'C', '#', ' ', ' ', ' ', ' ' },
      }));
    }

    private bool Solve(char[,] b)
    {
      var board = new Board(b);
      board.ReadBoard();
      board.PrintBoard(true);
      var solved = Str8tsSolver.Solve(board, out int iterations);
      return solved;
    }

    private char[,] LoadBoardFromFile(string filePath)
    {
      var board = new char[9, 9];
      var lines = File.ReadAllLines(filePath);

      for (int i = 0; i < lines.Length; i++)
      {
        for (int j = 0; j < lines[i].Length; j++)
        {
          var v = lines[i][j];
          board[i, j] = v == '.' ? ' ' : v;
        }
      }

      return board;
    }

    [Test]
    public void SolveBoards()
    {
      var files = Directory.GetFiles(@"..\\..\\..\\Samples_derwesten\", "board_*.txt");
      foreach (var file in files)
      {
        var board = LoadBoardFromFile(file);
        var solved = Solve(board);
        Assert.IsTrue(solved);
        if (!solved)
          Console.WriteLine($"Failed to solve {file}");
        else
          Console.WriteLine($"Solved {file}");
      }
    }
  }
}